

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

// TERMINALS
// keywords
terminal PROG, PRINT, RETURN, VOID, CLASS, NEW, READ, ENUM, EXTENDS, CONTINUE, CONST, BREAK, INTERFACE ;

terminal IF, ELSE;

// arithmetic
terminal MINUS, PLUS, DIV, MUL, MOD, AND, OR, INC, DEC ;

// comparison
terminal NEQ, GT, GTE, LT, LTE, EQEQ;

// brackets, parents, braces
terminal LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE ;

// special
terminal EQUAL, SEMI, COMMA, DOT ;

terminal Integer NUMBER ;
terminal String IDENT ;
terminal Boolean BOOLCONST ;
terminal Character CHAR ;

nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal EnumDeclList EnumDeclList;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, Access;
nonterminal rs.etf.pp1.symboltable.concepts.Obj EnumDecl, EnumName, Enumerations, Enumeration;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, TermList, FactorList;


Program ::= (Program) PROG ProgName:p VarDeclList:V1 EnumDeclList:E2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(p, V1, E2, M3); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
			;

VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI {: RESULT=new VarDecl(varType, varName); RESULT.setLine(varTypeleft); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :};

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;

EnumDeclList ::= (EnumDeclarations) EnumDeclList:E1 EnumDecl:E2 {: RESULT=new EnumDeclarations(E1, E2); RESULT.setLine(E1left); :}
					|
					(NoEnumDeclaration) {: RESULT=new NoEnumDeclaration(); :} /* epsilon */
					;

EnumDecl ::= (EnumDecl)  EnumName:E1 LBRACE Enumerations:E2 RBRACE {: RESULT=new EnumDecl(E1, E2); RESULT.setLine(E1left); :};

EnumName ::= (EnumName) ENUM IDENT:enumName {: RESULT=new EnumName(enumName); RESULT.setLine(enumNameleft); :};

Enumerations ::= (MultipleEnums) Enumerations:E1 COMMA Enumeration:E2 {: RESULT=new MultipleEnums(E1, E2); RESULT.setLine(E1left); :}
				 |
				 (SingleEnum) Enumeration:E1 {: RESULT=new SingleEnum(E1); RESULT.setLine(E1left); :}
				 ;

Enumeration ::= (EnumNoDefault) IDENT:id {: RESULT=new EnumNoDefault(id); RESULT.setLine(idleft); :}
				 |
				 (EnumDefault) IDENT:id EQUAL NUMBER:val {: RESULT=new EnumDefault(id, val); RESULT.setLine(idleft); :}
				 ;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
Statement ::= (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   |
		   (ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
		   ;
		   
DesignatorStatement ::= (Assignment) Designator:dest EQUAL Expr:e {: RESULT=new Assignment(dest, e); RESULT.setLine(destleft); :} 
						|
						(Increment) Designator:variable INC {: RESULT=new Increment(variable); RESULT.setLine(variableleft); :}
						|
						(Decrement) Designator:variable DEC {: RESULT=new Decrement(variable); RESULT.setLine(variableleft); :}
						; 

			
Expr ::= (ArithmeticExpr) TermList:termList {: RESULT=new ArithmeticExpr(termList); RESULT.setLine(termListleft); :}
		 ;

TermList ::= (AddopExpr) TermList:termList Addop:A1 Term:term {: RESULT=new AddopExpr(termList, A1, term); RESULT.setLine(termListleft); :}
			|
			(SingleTermExpr) Term:term {: RESULT=new SingleTermExpr(term); RESULT.setLine(termleft); :}
			;

Term ::= (Term) FactorList:factorList {: RESULT=new Term(factorList); RESULT.setLine(factorListleft); :};

FactorList ::= (MulopExpr) FactorList:F1 Mulop:M2 Factor:F3 {: RESULT=new MulopExpr(F1, M2, F3); RESULT.setLine(F1left); :}
				|
				(SingleFactor) Factor:F1 {: RESULT=new SingleFactor(F1); RESULT.setLine(F1left); :}
				|
				(NegatedFactor) MINUS Factor:F1 {: RESULT=new NegatedFactor(F1); RESULT.setLine(F1left); :}
				;

Factor ::= (DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :}
			|
			(FuncCallFactor) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCallFactor(func, A1); RESULT.setLine(funcleft); :}
			|			
			(OperatorNew) NEW Type:T1 {: RESULT=new OperatorNew(T1); RESULT.setLine(T1left); :}
			|
			(OperatorNewArray) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new OperatorNewArray(T1, E2); RESULT.setLine(T1left); :}
			|
			(ParenthesisExpr) LPAREN Expr:E1 RPAREN {: RESULT=new ParenthesisExpr(E1); RESULT.setLine(E1left); :}
			|
			(NumFactor) NUMBER:N1 {: RESULT=new NumFactor(N1); RESULT.setLine(N1left); :}
			|
			(CharFactor) CHAR:C1 {: RESULT=new CharFactor(C1); RESULT.setLine(C1left); :}
			/*|
			(BoolFactor) BOOLCONST
			*/
			;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
Designator ::= (NamedDesignator) IDENT:name {: RESULT=new NamedDesignator(name); RESULT.setLine(nameleft); :}
				|
				(AccessField) IDENT:varName DOT IDENT:field {: RESULT=new AccessField(varName, field); RESULT.setLine(varNameleft); :}
				|
				(AccessArray) IDENT:arrayName LBRACKET Expr:E1 RBRACKET {: RESULT=new AccessArray(arrayName, E1); RESULT.setLine(arrayNameleft); :}
;


Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :} | (AddopMinus) MINUS {: RESULT=new AddopMinus(); :};
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :} | (MulopDiv) DIV {: RESULT=new MulopDiv(); :} | (MulopMod) MOD {: RESULT=new MulopMod(); :};
		
		

