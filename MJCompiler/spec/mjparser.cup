

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

// TERMINALS
// keywords
terminal PROG, PRINT, RETURN, VOID, CLASS, NEW, READ, ENUM, EXTENDS, CONTINUE, CONST, BREAK, INTERFACE ;

terminal IF, ELSE;

// arithmetic
terminal MINUS, PLUS, DIV, MUL, MOD, AND, OR, INC, DEC ;

// comparison
terminal NEQ, GT, GTE, LT, LTE, EQEQ;

// brackets, parents, braces
terminal LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE ;

// special
terminal EQUAL, SEMI, COMMA, DOT ;

terminal Integer NUMBER ;
terminal String IDENT ;
terminal Boolean BOOLCONST ;
terminal Character CHAR ;

nonterminal VarDeclList, MethodDeclList, VarDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Addop, Mulop, ActualPars, ActualParamList;

nonterminal DesignatorStatement;
nonterminal Declarations, DeclarationsList, Value, VarDeclListList, VarDeclCommaList;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, ArrayName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj EnumDecl, EnumName, Enumerations, Enumeration;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, TermList, FactorList;


Program ::= (Program) PROG ProgName:p DeclarationsList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclarationsList ::= (MultipleDeclarations) DeclarationsList Declarations
					|
					(NoDeclarations) /* epsilon */
					;

Declarations ::= (DeclarationsVar) VarDeclList
				| 
				(DeclarationsEnum) EnumDecl
				|
				(DeclarationsConst) ConstDecl
				; 


ConstDecl ::= (ConstDecl) CONST Type:varType IDENT:varName EQUAL Value:constVal SEMI;

Value ::= (IntegerValue) NUMBER | (CharValue) CHAR ;

VarDeclListList ::= (VarDeclarations) VarDeclListList VarDeclList | (NoVarDeclarations) /*epsilon*/ ; 

VarDeclList ::= (VarDeclListOK) Type VarDeclCommaList SEMI 
				| (VarDeclListError) error SEMI:si
				{: 
					parser.log.debug("Uspesan oporavak od greske na liniji "+ sileft );
				:}
				;

VarDeclCommaList ::= (VarDecls) VarDeclCommaList COMMA VarDecl | (SingleVarDecl) VarDecl ;

VarDecl ::= (VarDeclIdArray) IDENT:varIdd LBRACKET RBRACKET | (VarDeclId) IDENT:varId ;

Type ::= (ExistingType) IDENT:typeName
		|
		(VoidType) VOID;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormPars RPAREN VarDeclListList LBRACE StatementList RBRACE;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName;

FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;


EnumDecl ::= (EnumDecl)  EnumName LBRACE Enumerations RBRACE;

EnumName ::= (EnumName) ENUM IDENT:enumName;

Enumerations ::= (MultipleEnums) Enumerations COMMA Enumeration
				 |
				 (SingleEnum) Enumeration
				 ;

Enumeration ::= (EnumNoDefault) IDENT:id
				 |
				 (EnumDefault) IDENT:id EQUAL NUMBER:val
				 ;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
Statement ::= (DesignatorStmt) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (PrintWidthStmt) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (ProcCall) Designator:func LPAREN ActualPars RPAREN SEMI
		   ;
		   
DesignatorStatement ::= (Assignment) Designator:dest EQUAL Expr:e 
						|
						(Increment) Designator:variable INC
						|
						(Decrement) Designator:variable DEC
						; 

			
Expr ::= (ArithmeticExpr) TermList:termList
		 ;

TermList ::= (AddopExpr) TermList:termList Addop Term:term
			|
			(SingleTermExpr) Term:term
			;

Term ::= (Term) FactorList:factorList;

FactorList ::= (MulopExpr) FactorList Mulop Factor
				|
				(SingleFactor) Factor
				|
				(NegatedFactor) MINUS Factor
				;

Factor ::= (DesignatorFactor) Designator
			|
			(FuncCallFactor) Designator:func LPAREN ActualPars RPAREN
			|			
			(OperatorNew) NEW Type
			|
			(OperatorNewArray) NEW Type LBRACKET Expr RBRACKET
			|
			(ParenthesisExpr) LPAREN Expr RPAREN
			|
			(NumFactor) NUMBER
			|
			(CharFactor) CHAR
			/*|
			(BoolFactor) BOOLCONST
			*/
			;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
				
Designator ::= (NamedDesignator) IDENT:name
				|
				(AccessField) IDENT:varName DOT IDENT:field
				|
				(AccessArray) ArrayName:arrayName LBRACKET Expr RBRACKET
;

ArrayName ::= (ArrayName) IDENT;


Addop ::= (AddopPlus) PLUS | (AddopMinus) MINUS;
Mulop ::= (MulopMul) MUL | (MulopDiv) DIV | (MulopMod) MOD;
		
		

